const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = 5000;

app.use(bodyParser.json());
app.use(cors());

// Sample users with roles
const users = [
  { username: 'admin', password: 'admin123', role: 'Admin' },
  { username: 'moderator', password: 'mod123', role: 'Moderator' },
  { username: 'user', password: 'user123', role: 'User' }
];

const SECRET_KEY = 'secretKey';

// Login route - issues JWT with role
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username && u.password === password);

  if (!user) return res.status(401).json({ message: 'Invalid credentials' });

  const token = jwt.sign({ username: user.username, role: user.role }, SECRET_KEY, { expiresIn: '1h' });
  res.json({ token });
});

// JWT verification middleware
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) return res.status(401).json({ message: 'Token missing' });

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) return res.status(403).json({ message: 'Invalid token' });
    req.user = user;
    next();
  });
}

// Role-based authorization middleware
function authorizeRoles(...allowedRoles) {
  return (req, res, next) => {
    if (!req.user || !allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ message: 'Access denied: insufficient role' });
    }
    next();
  };
}

// Protected routes
app.get('/admin-dashboard', authenticateToken, authorizeRoles('Admin'), (req, res) => {
  res.json({ message: `Welcome Admin ${req.user.username}` });
});

app.get('/moderator-management', authenticateToken, authorizeRoles('Moderator', 'Admin'), (req, res) => {
  res.json({ message: `Welcome Moderator ${req.user.username}` });
});

app.get('/user-profile', authenticateToken, authorizeRoles('User', 'Moderator', 'Admin'), (req, res) => {
  res.json({ message: `Hello ${req.user.username}, this is your profile` });
});

// Start server
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
